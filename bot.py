import json
import random
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters, CallbackQueryHandler


def load_idioms(filename='idioms.json'):
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            data = json.load(file)
            print("–ò–¥–∏–æ–º—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
            if "idioms" in data:
                return data["idioms"]
            else:
                print("–û—à–∏–±–∫–∞: –≤ JSON –Ω–µ—Ç –∫–ª—é—á–∞ 'idioms'.")
                return []
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return []


idioms = load_idioms()

def get_main_keyboard():
    return ReplyKeyboardMarkup([
        ['–ü–æ–ª—É—á–∏—Ç—å –∏–¥–∏–æ–º—É', '–ü–æ–º–æ—â—å']
    ], resize_keyboard=True)


def get_inline_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('–ü–æ–ª—É—á–∏—Ç—å –∏–¥–∏–æ–º—É', callback_data='get_idiom')]
    ])


async def start(update: Update, context: CallbackContext) -> None:
    message = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–¥–∏–æ–º—ã.\n"
        "üëâ –ù–∞–∂–º–∏ '–ü–æ–ª—É—á–∏—Ç—å –∏–¥–∏–æ–º—É', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–∏–æ–º—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–æ–º.\n"
        "üí° –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏ '–ü–æ–º–æ—â—å'."
    )

    await update.message.reply_text(message, reply_markup=get_main_keyboard())


async def get_idiom(update: Update, context: CallbackContext) -> None:
    idiom = random.choice(idioms)
    message = (
        f"üî§ **–ò–¥–∏–æ–º–∞:** {idiom['idiom']}\n"
        f"üìù **–ü–µ—Ä–µ–≤–æ–¥:** {idiom['translation']}\n"
        f"üìñ **–ü—Ä–∏–º–µ—Ä:** {idiom['example']}"
    )
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=get_inline_keyboard())


async def help_command(update: Update, context: CallbackContext) -> None:
    message = (
        "üìò –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "üëâ –ù–∞–∂–º–∏ '–ü–æ–ª—É—á–∏—Ç—å –∏–¥–∏–æ–º—É' ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–∏–æ–º—É —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –∏ –ø—Ä–∏–º–µ—Ä–æ–º.\n"
        "üëâ –ù–∞–∂–º–∏ '–ü–æ–º–æ—â—å' ‚Äî —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )
    await update.message.reply_text(message, reply_markup=get_main_keyboard())


async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'get_idiom':

        idiom = random.choice(idioms)
        message = (
            f"üî§ **–ò–¥–∏–æ–º–∞:** {idiom['idiom']}\n"
            f"üìù **–ü–µ—Ä–µ–≤–æ–¥:** {idiom['translation']}\n"
            f"üìñ **–ü—Ä–∏–º–µ—Ä:** {idiom['example']}"
        )
        await query.edit_message_text(message, parse_mode="Markdown", reply_markup=get_inline_keyboard())


def main() -> None:
    application = Application.builder().token("7787551431:AAGFoI8foA52p304FTY1e0t2kzVMG87_ma4").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    application.add_handler(MessageHandler(filters.Regex('^–ü–æ–ª—É—á–∏—Ç—å –∏–¥–∏–æ–º—É$'), get_idiom))
    application.add_handler(MessageHandler(filters.Regex('^–ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(CallbackQueryHandler(button))

    application.run_polling()


if __name__ == "__main__":
    main()
